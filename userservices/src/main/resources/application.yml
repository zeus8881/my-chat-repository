spring:
  application:
    name: userservices

  datasource:
    username: root
    password: Qwerty_12345
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://mysql:3306/microserviceDb1

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        hbm2ddl:
          drop_constraints: true
    generate-ddl: true
    open-in-view: true
    show-sql: true

  data:
    redis:
      host: myRedisContainer
      port: 6379

logging:
  level:
    org.hibernate: warn
    web: INFO

management:
  endpoints:
    web:
      exposure:
        include: health, metrics, info, prometheus
  metrics:
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
  prometheus:
    metrics:
      export:
        enabled: true
  endpoint:
    health:
      show-details: always

server:
  port: 8083


#  security:
#    oauth2:
#      resourceserver:
#        jwt:
#          issuer-uri: http://keycloakDb1Container:9093/realms/DemoRealm
#      client:
#        registration:
#          keycloak:
#            client-id: mySpringBootClient
#            client-secret: TDIjCM1kwpRuoi4pvGUBqcnTryMrM94z
#            scope: openid
#            authorization-grant-type: authorization_code
#            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
#        provider:
#          keycloak:
#            issuer-uri: http://keycloakDb1Container:9093/realms/DemoRealm
#            user-name-attribute: preferred_username
#  kafka:
#    bootstrap-servers: localhost:9095
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#    consumer:
#      group-id: my-group
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#      properties:
#        spring.json.trusted.packages: "*"
#    listener:
#      ack-mode: record





#eureka:
#  client:
#    serviceUrl:
#      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka/}
#    registerWithEureka: true
#    fetchRegistry: true
#  instance:
#    prefer-ip-address: true